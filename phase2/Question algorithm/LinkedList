############################

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

- Solution: Using to two pointer, 1 jump one step, 1 jump two step when two pointer meet => have circle. If not then two pointer to equal to zero.

############################

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Notice that you should not modify the linked list.

- Solution: Using to two pointer, 1 jump one step, 1 jump two step when two pointer meet => have circle => then move slow pointer to head => jump slow and fast pointer by one => when two pointer meet => that the start of the circle. If not then two pointer to equal to zero.

############################

Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

- Solution: Using to two pointer, both jump one step. When one of the linked list reach null => move it to the head of other linked list. At the point, both pointer meet that the interset node.

############################

Given the head of a linked list, remove the nth node from the end of the list and return its head.

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

- Solution: You have two pointer, 1 start from head (p), one start from n position (q). When move to end of list, point the p next node to q

############################

Given the head of a singly linked list, reverse the list, and return the reversed list

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Solution: Move the head node slowing to end of list, need another pointer to stored the last head node.

############################

Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Solution: Loop through the linked list and remove all the value same as input val. Need to check case insert at start of linked list.

############################

Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

Solution: Loop through the linked list, each time we meet an even value move it to another linked list to keep track. When we reach the end of original linked list point the tail next node to the head of tracking linked list.

############################

Given the head of a singly linked list, return true if it is a palindrome

Input: head = [1,2,2,1]
Output: true

Solution: Use two pointer to find the center point of linked list then revert the other haft. Then compare two linked list

############################

Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists

Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Solution: Use two pointers start at the head of each list. Select the start linked list which have the head value smaller than other. Then, on each loop compare the next value of the start linked list which the current value on the other linked list. if the next value of start linked list have greater value the other linked list then point the next node of current node on start linked list to the current node on other linkedlist then start the progress compare again. Remember to save the next node of current start linked list because you have change next node of current start linked list.

public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    if (l1 == null) {
        return l2;
    }
    
    if (l2 == null) {
        return l1;
    }
    
    boolean isSelectL1 = l1.val < l2.val;
    ListNode lastLeftOffNode = isSelectL1 ? l2 : l1;
    ListNode currentCounterNode = isSelectL1 ? l1 : l2;
    while (currentCounterNode.next != null) {
        if (currentCounterNode.next.val > lastLeftOffNode.val) {
            ListNode temp = lastLeftOffNode;
            lastLeftOffNode = currentCounterNode.next;
            currentCounterNode.next = temp;
        } 
        currentCounterNode = currentCounterNode.next;
    }
    
    if (lastLeftOffNode != null) {
        currentCounterNode.next = lastLeftOffNode;
    }
    
    return isSelectL1 ? l1 : l2;
} 

############################

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

- Solution: loop though both linked list, move one at a time. Adding value of two node, if > 9 then remember add 1 to the next sum. when reach the end of one linked list. Added the rest remain to result linked list.

############################

A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.

 
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Solution: Use hashmap to store the created node when check random pointer node. 

Another solution is create node A' next to A node.

Old List: A --> B --> C --> D
InterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'

After duplicate, loop though the list can correct the pointer.

############################

Given the head of a linked list, rotate the list to the right by k places.

Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Solution: find the length first. The calculate mode value. then calculating detal value, loop through to delta position and move the rest item from delta value to before head of linkedlist. 

